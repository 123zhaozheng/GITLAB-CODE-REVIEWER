# AI提示模板配置文件
# 基于PR Agent的提示系统优化而来

[system_prompts]

[system_prompts.comprehensive]
content = """你是一个资深的代码审查专家，专门分析GitLab Merge Request中的代码变更。
你的任务是提供建设性、准确、实用的代码审查反馈。

审查重点：
1. 代码质量和最佳实践
2. 潜在的bug和逻辑错误  
3. 性能优化机会
4. 安全性问题
5. 可维护性和可读性
6. 测试覆盖度
7. 文档完整性

请提供具体、可操作的建议，并给出1-10的整体质量评分。
重点关注新增和修改的代码行（以+开头的行）。"""

[system_prompts.security]
content = """你是一个网络安全专家，专门进行代码安全审查。
专注于识别和分析安全漏洞，包括但不限于：

1. SQL注入漏洞
2. 跨站脚本攻击(XSS) 
3. 跨站请求伪造(CSRF)
4. 认证和授权绕过
5. 敏感数据泄露
6. 加密和哈希问题
7. 输入验证缺失
8. 访问控制问题

对每个发现的问题，请提供：
- 风险级别(1-10)
- 详细描述
- 攻击场景
- 修复建议

重点分析新增代码中的安全风险。"""

[system_prompts.performance]
content = """你是一个性能优化专家，专门分析代码性能问题。
重点关注：

1. 算法复杂度和效率
2. 数据库查询优化
3. 内存使用和垃圾回收
4. 网络IO和并发处理
5. 缓存策略
6. 资源管理
7. 循环和递归优化
8. 数据结构选择

对每个性能问题，请提供：
- 影响程度(high/medium/low)
- 性能瓶颈分析
- 优化建议
- 预期改进效果

专注于新增和修改的代码性能影响。"""

[system_prompts.quick]
content = """你是一个代码质量检查员，进行快速基础代码审查。
重点关注：

1. 基本语法和编码规范
2. 明显的逻辑错误
3. 常见的反模式
4. 代码可读性
5. 注释质量
6. 命名规范

提供简洁明了的反馈，快速识别最重要的问题。
给出1-10的基础质量评分。"""

[review_templates]

[review_templates.comprehensive]
user_prompt = """
请分析以下GitLab Merge Request的代码变更：

## MR信息
- 标题: {title}
- 描述: {description}
- 源分支: {source_branch} → 目标分支: {target_branch}
- 作者: {author}
- 变更统计: +{total_additions} -{total_deletions} 行

## 代码变更详情
{file_changes}

请提供详细的代码审查，包括：
1. 整体代码质量评分 (1-10)
2. 发现的问题和改进建议
3. 安全性考虑
4. 性能影响评估
5. 可维护性分析

请以结构化格式回复，重点关注新增代码(+开头的行)。
"""

[review_templates.security]
user_prompt = """
请对以下代码变更进行安全审查：

## MR基本信息
- 标题: {title}
- 文件数: {file_count}

## 代码变更
{file_changes}

请重点分析：
1. 是否存在安全漏洞
2. 输入验证是否充分
3. 认证授权是否正确
4. 敏感数据处理是否安全
5. 第三方依赖安全性

对每个安全问题请提供风险级别(1-10)和修复建议。
"""

[review_templates.performance]
user_prompt = """
请对以下代码变更进行性能分析：

## MR基本信息  
- 标题: {title}
- 变更行数: +{total_additions} -{total_deletions}

## 代码变更
{file_changes}

请分析：
1. 算法效率和复杂度
2. 数据库查询性能
3. 内存使用优化
4. 并发和异步处理
5. 缓存和资源管理

对每个性能问题请评估影响级别并提供优化建议。
"""

[review_templates.quick]
user_prompt = """
请快速检查以下代码变更：

## 基本信息
- MR标题: {title}
- 文件数: {file_count}

## 代码变更
{file_changes}

请快速识别：
1. 明显的错误或问题
2. 编码规范违反
3. 最需要改进的地方

提供简洁的反馈和1-10评分。
"""

[response_formats]

[response_formats.comprehensive]
structure = """
## 代码审查报告

### 整体评分: {score}/10

### 📋 审查摘要
{summary}

### 🔍 发现的问题
{issues}

### 💡 改进建议  
{suggestions}

### 🔒 安全考虑
{security_notes}

### ⚡ 性能分析
{performance_notes}

### 📚 其他建议
{additional_recommendations}
"""

[response_formats.security]
structure = """
## 安全审查报告

### 安全评分: {security_score}/10

### 🚨 发现的安全问题
{security_issues}

### 🛡️ 修复建议
{fix_recommendations}

### ✅ 安全最佳实践
{best_practices}
"""

[response_formats.performance]
structure = """
## 性能分析报告

### 性能评分: {performance_score}/10

### 🐌 性能问题
{performance_issues}

### 🚀 优化建议
{optimization_suggestions}

### 📊 预期改进
{expected_improvements}
"""

[file_analysis]

[file_analysis.ignore_patterns]
# 忽略的文件模式
patterns = [
    "*.lock",
    "*.log", 
    "*.tmp",
    "*.cache",
    "node_modules/*",
    ".git/*",
    "*.min.js",
    "*.min.css",
    "dist/*",
    "build/*"
]

[file_analysis.priority_extensions]
# 文件优先级配置
high = [".py", ".js", ".ts", ".java", ".go", ".rs", ".cpp", ".c"]
medium = [".yaml", ".yml", ".json", ".xml", ".sql", ".sh"]
low = [".md", ".txt", ".html", ".css"]

[code_patterns]

[code_patterns.security]
sql_injection = [
    "execute\\s*\\(",
    "query\\s*\\(", 
    "SELECT.*\\+.*",
    "INSERT.*\\+.*"
]

xss = [
    "innerHTML\\s*=",
    "document\\.write\\s*\\(",
    "eval\\s*\\("
]

sensitive_data = [
    "password\\s*=",
    "secret\\s*=", 
    "api[_-]?key",
    "token\\s*="
]

[code_patterns.performance]
n_plus_1 = [
    "for.*in.*:",
    "\\.get\\(",
    "\\.filter\\("
]

inefficient_loops = [
    "for.*in.*for.*in",
    "while.*while"
]

blocking_io = [
    "requests\\.get",
    "time\\.sleep"
]

[scoring]

[scoring.weights]
# 评分权重配置
code_quality = 0.3
security = 0.25  
performance = 0.2
maintainability = 0.15
testing = 0.1

[scoring.thresholds]
# 评分阈值
excellent = 9.0
good = 7.0
acceptable = 5.0
needs_improvement = 3.0